{"version":3,"sources":["store/store.js","api.js","components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","index.js"],"names":["selectPosts","state","posts","selectLoading","isLoading","selectSearchError","isSearchError","ACTION_TYPES","createStore","action","newPosts","type","Object","objectSpread2","payload","postsFromServer","filter","post","id","map","postId","comments","comment","commentId","visiblePosts","title","toLowerCase","includes","body","length","getData","URL","fetch","then","response","json","User","_ref","_ref$user","user","name","email","address","react_default","a","createElement","entries","_ref2","_ref3","slicedToArray","key","value","Fragment","mapDispatchToProps","deleteComment","connect","_ref$comment","className","onClick","CommentList","components_Comment","deletePost","_ref$post","components_User","components_CommentList","components_Post","setPosts","setLoading","filterPosts","placeholder","onChange","event","target","trim","_posts","users","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","find","userId","t0","console","error","finish","stop","components_PostList","ReactDOM","render","es","store","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e1005bc1.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst initialState = {\n  postsFromServer: [],\n  posts: [],\n  isLoading: false,\n  isSearchError: false,\n};\n\nexport const selectPosts = state => state.posts;\nexport const selectLoading = state => state.isLoading;\nexport const selectSearchError = state => state.isSearchError;\n\nconst ACTION_TYPES = {\n  SET_POSTS: 'setPosts',\n  DELETE_POST: 'deletePost',\n  DELETE_COMMENT: 'deleteComment',\n  SET_LOADING: 'setLoading',\n  FILTER_POSTS: 'filterPosts',\n};\n\nexport const createActionSetPosts = payload => ({\n  type: ACTION_TYPES.SET_POSTS,\n  payload,\n});\n\nexport const createActionDeletePost = payload => ({\n  type: ACTION_TYPES.DELETE_POST,\n  payload,\n});\n\nexport const createActionDeleteComment = (postId, commentId) => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nexport const createActionSetLoading = payload => ({\n  type: ACTION_TYPES.SET_LOADING,\n  payload,\n});\n\nexport const createActionFilterPosts = payload => ({\n  type: ACTION_TYPES.FILTER_POSTS,\n  payload,\n});\n\nconst rootReducer = (state, action) => {\n  let newPosts;\n\n  switch (action.type) {\n    case ACTION_TYPES.SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n        postsFromServer: action.payload,\n      };\n\n    case ACTION_TYPES.DELETE_POST:\n      newPosts = state.posts.filter(post => post.id !== action.payload);\n\n      return {\n        ...state,\n        posts: newPosts,\n        postsFromServer: newPosts,\n      };\n\n    case ACTION_TYPES.DELETE_COMMENT:\n      newPosts = (state.posts.map(post => post.id === action.postId\n        ? {\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.commentId),\n        }\n        : post));\n\n      return {\n        ...state,\n        posts: newPosts,\n        postsFromServer: newPosts,\n      };\n\n    case ACTION_TYPES.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case ACTION_TYPES.FILTER_POSTS:\n      const visiblePosts = state.postsFromServer\n        .filter(post => post.title.toLowerCase().includes(action.payload)\n          || post.body.toLowerCase().includes(action.payload));\n\n      return visiblePosts.length === 0\n        ? {\n          ...state,\n          isSearchError: true,\n        }\n        : {\n          ...state,\n          posts: visiblePosts,\n          isSearchError: false,\n        };\n\n    default:\n      return state;\n  }\n};\n\nexport default createStore(rootReducer, initialState);\n","const postsURL = 'https://jsonplaceholder.typicode.com/posts';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\nconst commentsURL = 'https://jsonplaceholder.typicode.com/comments';\n\nconst getData = URL => fetch(URL)\n  .then(response => response.json());\n\nexport const getPosts = () => getData(postsURL);\nexport const getUsers = () => getData(usersURL);\nexport const getComments = () => getData(commentsURL);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user: { name, email, address } }) => (\n  <section>\n    <p>{name}</p>\n    <p>{email}</p>\n\n    <address>\n      {Object.entries(address)\n        .map(([key, value]) => typeof value !== 'object' && (\n          <React.Fragment key={key}>\n            {key}\n            {' '}\n            {value}\n            <br />\n          </React.Fragment>\n        ))\n      }\n    </address>\n  </section>\n);\n\nUser.propTypes = { user: PropTypes.shape({\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.object,\n}).isRequired };\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { createActionDeleteComment } from '../store/store';\n\nconst Comment = ({ postId, deleteComment, comment: { id, name, email, body } }) => (\n  <section className=\"comment\">\n    <section className=\"title\">\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => deleteComment(postId, id)}\n      >\n        x\n      </button>\n      <h3 className=\"comment__title\">\n        {name}\n      </h3>\n    </section>\n\n    <section className=\"comment__main-part\">\n      <p>\n        {email}\n      </p>\n\n      <p className=\"comment__body\">\n        {body}\n      </p>\n    </section>\n  </section>\n);\n\nconst mapDispatchToProps = {\n  deleteComment: createActionDeleteComment,\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(Comment);\n\nComment.propTypes = {\n  postId: PropTypes.number.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ postId, comments }) => comments.map(comment => (\n  <Comment key={comment.id} comment={comment} postId={postId} />\n));\n\nCommentList.propTypes = {\n  postId: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { createActionDeletePost } from '../store/store';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ deletePost, post: { id, title, body, user, comments } }) => (\n  <article className=\"post\">\n    <section className=\"title\">\n      <h2>{title}</h2>\n      <button\n        className=\"delete\"\n        onClick={() => deletePost(id)}\n      >\n        x\n      </button>\n    </section>\n\n    <section className=\"post__main-part\">\n      <p className=\"post__body\">\n        {body}\n      </p>\n\n      <User user={user} />\n    </section>\n\n    <CommentList comments={comments} postId={id} />\n  </article>\n);\n\nconst mapDispatchToProps = {\n  deletePost: createActionDeletePost,\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(Post);\n\nPost.propTypes = {\n  deletePost: PropTypes.func.isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.object,\n    comments: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { selectPosts } from '../store/store';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => posts.map(post => (\n  <Post key={post.id} post={post} />\n));\n\nconst mapStateToProps = state => ({\n  posts: selectPosts(state),\n});\n\nexport default connect(mapStateToProps)(PostList);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.object).isRequired };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  selectPosts,\n  selectLoading,\n  selectSearchError,\n  createActionSetPosts,\n  createActionSetLoading,\n  createActionFilterPosts,\n} from './store/store';\n\nimport './App.scss';\nimport { getPosts, getUsers, getComments } from './api';\nimport PostList from './components/PostList';\n\nconst App = ({ isLoading, setLoading, posts, setPosts, filterPosts, isSearchError }) => {\n  const loadData = async() => {\n    setLoading(true);\n\n    try {\n      const [\n        posts,\n        users,\n        comments,\n      ] = await Promise.all([getPosts(), getUsers(), getComments()]);\n\n      setPosts(posts.map(post => ({\n        ...post,\n        user: users.find(user => user.id === post.userId),\n        comments: comments.filter(comment => comment.postId === post.id),\n      })));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main className=\"list\">\n      <h1>Dynamic list of posts</h1>\n      {posts.length !== 0 && (\n        <section className=\"search-bar\">\n          <input\n            type=\"text\"\n            placeholder=\"search post\"\n            className=\"input\"\n            onChange={event => filterPosts(event.target.value.toLowerCase().trim())}\n          />\n\n          {isSearchError && (\n            <p className=\"warning\">\n              There are no such posts, please try another search combination\n            </p>\n          )}\n        </section>\n      )}\n\n      {isLoading && (\n        <button\n          type=\"button\"\n          className=\"button button--non-active\"\n        >\n          Loading\n        </button>\n      )}\n      {!isLoading && (posts.length === 0 ? (\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={loadData}\n        >\n          Load\n        </button>\n      ) : (\n        <PostList />\n      ))}\n    </main>\n  );\n};\n\nconst mapStateToProps = state => ({\n  posts: selectPosts(state),\n  isLoading: selectLoading(state),\n  isSearchError: selectSearchError(state),\n});\n\nconst mapDispatchToProps = {\n  setPosts: createActionSetPosts,\n  setLoading: createActionSetLoading,\n  filterPosts: createActionFilterPosts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  setLoading: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  filterPosts: PropTypes.func.isRequired,\n  isSearchError: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}